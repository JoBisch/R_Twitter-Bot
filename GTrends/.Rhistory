labs(caption="Source: Quandl (https://www.quandl.com/data/BCHAIN/HRATE-Bitcoin-Hash-Rate)") +
theme(legend.position = "none", axis.title.x=element_blank())
plot
# plot _________________________________
plot <- ggplot(data=data, aes(x=Date, y=Value)) +
geom_line(color = "black", size=0.7) +
geom_line(aes(Date,ma),color="orange", size=2) +
geom_point(data=data[1:1, ], aes(x=Date, y=Value), colour="red", size=2) +
ylab('Hash Rate (TH/s)') +
scale_y_continuous(expand = c(0, 0)) +
theme_bw() +
labs(caption="Source: Quandl (https://www.quandl.com/data/BCHAIN/HRATE-Bitcoin-Hash-Rate)") +
theme(legend.position = "none", axis.title.x=element_blank())
plot
# plot _________________________________
plot <- ggplot(data=data, aes(x=Date, y=Value)) +
geom_line(color = "black", size=0.7) +
geom_line(aes(Date,ma),color="orange", size=2) +
geom_point(data=data[1:1, ], aes(x=Date, y=Value), colour="black", size=2) +
ylab('Hash Rate (TH/s)') +
scale_y_continuous(expand = c(0, 0)) +
theme_bw() +
labs(caption="Source: Quandl (https://www.quandl.com/data/BCHAIN/HRATE-Bitcoin-Hash-Rate)") +
theme(legend.position = "none", axis.title.x=element_blank())
plot
# plot _________________________________
plot <- ggplot(data=data, aes(x=Date, y=Value)) +
geom_line(color = "black", size=0.7) +
geom_line(aes(Date,ma),color="orange", size=2) +
geom_point(data=data[1:1, ], aes(x=Date, y=Value), colour="black", size=1
) +
ylab('Hash Rate (TH/s)') +
scale_y_continuous(expand = c(0, 0)) +
theme_bw() +
labs(caption="Source: Quandl (https://www.quandl.com/data/BCHAIN/HRATE-Bitcoin-Hash-Rate)") +
theme(legend.position = "none", axis.title.x=element_blank())
plot
# plot _________________________________
plot <- ggplot(data=data, aes(x=Date, y=Value)) +
geom_line(color = "black", size=0.7) +
geom_line(aes(Date,ma),color="orange", size=2) +
geom_point(data=data[1:1, ], aes(x=Date, y=Value), colour="black", size=1.5) +
ylab('Hash Rate (TH/s)') +
scale_y_continuous(expand = c(0, 0)) +
theme_bw() +
labs(caption="Source: Quandl (https://www.quandl.com/data/BCHAIN/HRATE-Bitcoin-Hash-Rate)") +
theme(legend.position = "none", axis.title.x=element_blank())
plot
# save plot ____________________________
ggsave("BTC_hashrate.png", plot = last_plot())
twitter <- config::get("twitter")
# twitter login credentuials ___________
appname <- "gtrendsc"
consumerKey <- twitter$consumerKey
consumerSecret <- twitter$consumerSecret
accessToken <- twitter$accessToken
# plot _________________________________
plot <- ggplot(data=data, aes(x=Date, y=Value)) +
geom_line(color = "black", size=0.5) +
geom_line(aes(Date,ma),color="orange", size=2) +
geom_point(data=data[1:1, ], aes(x=Date, y=Value), colour="black", size=1.5) +
ylab('Hash Rate (TH/s)') +
scale_y_continuous(expand = c(0, 0)) +
theme_bw() +
labs(caption="Source: Quandl (https://www.quandl.com/data/BCHAIN/HRATE-Bitcoin-Hash-Rate)") +
theme(legend.position = "none", axis.title.x=element_blank())
plot
# save plot ____________________________
ggsave("BTC_hashrate.png", plot = last_plot())
# get API-Key from config ______________
quandl <- config::get("quandl")
apikey <- quandl$apikey
# get data from quandl _________________
data <- Quandl("BCHAIN/DIFF"
, api_key=apikey
,start_date=today.3y
, end_date=today)
data$Value <- data$Value/1000000000000
# Make zoo object of data ______________
temp.zoo<-zoo(data$Value)
# Calculate moving average with window and make first and last value as NA (to ensure identical length of vectors)
ma<-rollmean(temp.zoo, 100, fill = list(NA, NULL, NA))
# Add calculated moving averages to existing data frame
data$ma=coredata(ma)
# plot _________________________________
plot <- ggplot(data=data, aes(x=Date, y=Value)) +
geom_line(color = "black", size=0.5) +
geom_line(aes(Date,ma),color="orange", size=2) +
geom_point(data=data[1:1, ], aes(x=Date, y=Value), colour="black", size=1.5) +
ylab('Hash Rate (TH/s)') +
scale_y_continuous(expand = c(0, 0)) +
theme_bw() +
labs(caption="Source: Quandl (https://www.quandl.com/data/BCHAIN/DIFF-Bitcoin-Difficulty)") +
theme(legend.position = "none", axis.title.x=element_blank())
plot
# plot _________________________________
plot <- ggplot(data=data, aes(x=Date, y=Value)) +
geom_line(color = "black", size=0.5) +
geom_line(aes(Date,ma),color="orange", size=2) +
ylab('Hash Rate (TH/s)') +
scale_y_continuous(expand = c(0, 0)) +
theme_bw() +
labs(caption="Source: Quandl (https://www.quandl.com/data/BCHAIN/DIFF-Bitcoin-Difficulty)") +
theme(legend.position = "none", axis.title.x=element_blank())
plot
# plot _________________________________
plot <- ggplot(data=data, aes(x=Date, y=Value)) +
geom_line(color = "black", size=1) +
geom_line(aes(Date,ma),color="orange", size=2) +
ylab('Hash Rate (TH/s)') +
scale_y_continuous(expand = c(0, 0)) +
theme_bw() +
labs(caption="Source: Quandl (https://www.quandl.com/data/BCHAIN/DIFF-Bitcoin-Difficulty)") +
theme(legend.position = "none", axis.title.x=element_blank())
## clear the cache _____________________
rm(list = ls())
# packages _____________________________
packages <- c("rtweet", "dplyr", "tidyr", "Quandl", "ggplot2", "zoo")
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# usage ________________________________
ipak(packages)
# sets working directory to RScript location
if (Sys.getenv("RSTUDIO") == "1") {
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
} else {
wd <- '/home/R_Twitter-Bot/Twitter_Sentiment-Analysis'
}
setwd(wd)
# variable today _______________________
today <- Sys.Date()
today.3y <- today %m+% years(-3)
today.5y <- today %m+% years(-5)
# get API-Key from config ______________
quandl <- config::get("quandl")
apikey <- quandl$apikey
# get data from quandl _________________
data <- Quandl("BCHAIN/HRATE"
, api_key=apikey
,start_date=today.3y
, end_date=today)
data$Value <- data$Value/1000000
# Make zoo object of data ______________
temp.zoo<-zoo(data$Value)
# Calculate moving average with window and make first and last value as NA (to ensure identical length of vectors)
ma<-rollmean(temp.zoo, 100, fill = list(NA, NULL, NA))
# Add calculated moving averages to existing data frame
data$ma=coredata(ma)
# plot _________________________________
plot <- ggplot(data=data, aes(x=Date, y=Value)) +
geom_line(color = "black", size=0.5) +
geom_line(aes(Date,ma),color="orange", size=2) +
geom_point(data=data[1:1, ], aes(x=Date, y=Value), colour="black", size=1.5) +
ylab('Hash Rate (TH/s)') +
scale_y_continuous(expand = c(0, 0)) +
theme_bw() +
labs(caption="Source: Quandl (https://www.quandl.com/data/BCHAIN/HRATE-Bitcoin-Hash-Rate)") +
theme(legend.position = "none", axis.title.x=element_blank())
plot
# save plot ____________________________
ggsave("BTC_hashrate.png", plot = last_plot())
## clear the cache _____________________
rm(list = ls())
# packages _____________________________
packages <- c("rtweet", "dplyr", "tidyr", "Quandl", "ggplot2", "zoo")
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# usage ________________________________
ipak(packages)
# sets working directory to RScript location
if (Sys.getenv("RSTUDIO") == "1") {
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
} else {
wd <- '/home/R_Twitter-Bot/Twitter_Sentiment-Analysis'
}
setwd(wd)
# variable today _______________________
today <- Sys.Date()
today.3y <- today %m+% years(-3)
today.5y <- today %m+% years(-5)
# get API-Key from config ______________
quandl <- config::get("quandl")
apikey <- quandl$apikey
# get data from quandl _________________
data <- Quandl("BCHAIN/DIFF"
, api_key=apikey
,start_date=today.3y
, end_date=today)
data$Value <- data$Value/1000000000000
# Make zoo object of data ______________
temp.zoo<-zoo(data$Value)
# Calculate moving average with window and make first and last value as NA (to ensure identical length of vectors)
ma<-rollmean(temp.zoo, 100, fill = list(NA, NULL, NA))
# Add calculated moving averages to existing data frame
data$ma=coredata(ma)
# plot _________________________________
plot <- ggplot(data=data, aes(x=Date, y=Value)) +
geom_line(color = "black", size=1) +
geom_line(aes(Date,ma),color="orange", size=2) +
ylab('Hash Rate (TH/s)') +
scale_y_continuous(expand = c(0, 0)) +
theme_bw() +
labs(caption="Source: Quandl (https://www.quandl.com/data/BCHAIN/DIFF-Bitcoin-Difficulty)") +
theme(legend.position = "none", axis.title.x=element_blank())
plot
# save plot ____________________________
ggsave("BTC_difficulty.png", plot = last_plot())
# plot _________________________________
plot <- ggplot(data=data, aes(x=Date, y=Value)) +
geom_line(color = "black", size=1) +
geom_line(aes(Date,ma),color="orange", size=2) +
ylab('Mining Difficulty (Trillions)') +
scale_y_continuous(expand = c(0, 0)) +
theme_bw() +
labs(caption="Source: Quandl (https://www.quandl.com/data/BCHAIN/DIFF-Bitcoin-Difficulty)") +
theme(legend.position = "none", axis.title.x=element_blank())
plot
# save plot ____________________________
ggsave("BTC_difficulty.png", plot = last_plot())
data
rm(list = ls())
# packages _____________________________
packages <- c("gtrendsR"
,"lubridate"
,"config"
,"rstudioapi"
,"tidyverse"
,"viridis"
,"hrbrthemes"
,"mapdata"
,"hexbin")
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# usage ________________________________
ipak(packages)
# sets working directory to RScript location
if (Sys.getenv("RSTUDIO") == "1") {
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
} else {
wd <- '/home/R_Twitter-Bot/GTrends'
}
setwd(wd)
today <- Sys.Date()
today.5y <- today %m+% years(-5)
# gtrends variables ____________________
# define the keywords __________________
keywords=c("Bitcoin")
# set the geographic area: DE = Germany
country=c("")
# set the time window __________________
time=(paste(today.5y, today, sep = " "))
# set channels _________________________
channel=c("web", "news", "images", "froogle", "youtube")
# get google trends data _______________
gtrends.data <- gtrends(keyword = keywords, geo = country, time = time,
gprop = channel,
category = 0, hl = "en-US", low_search_volume = FALSE,
cookie_url = "http://trends.google.com/Cookies/NID", tz = 0,
onlyInterest = FALSE)
# select only interst over time ________
gtrends.data.country <- gtrends.data$interest_by_country
# Load dataset from github
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/17_ListGPSCoordinates.csv", sep=",", header=T)
# Get the world polygon
world <- map_data("world")
# plot
ggplot(data, aes(x=homelon, y=homelat)) +
geom_polygon(data = world, aes(x=long, y = lat, group = group), fill="grey", alpha=0.5) +
geom_hex(bins=100) +
#ggplot2::annotate("text", x = 175, y = 80, label="Worldwide Bitcoin Interest (Google Trends)", colour = "black", size=4, alpha=1, hjust=1) +
#ggplot2::annotate("segment", x = 100, xend = 175, y = 73, yend = 73, colour = "black", size=0.2, alpha=1) +
theme_void() +
ylim(-70, 80) +
scale_fill_viridis(
trans = "log",
breaks = seq(from = 0, to = 100, by = 10),
name=" ",
guide = guide_legend( keyheight = unit(2.5, units = "mm"), keywidth=unit(10, units = "mm"), label.position = "bottom", title.position = 'top', nrow=1)
)  +
ggtitle( "" ) +
theme(
legend.position = c(0.3, 0.01),
legend.title=element_text(color="black", size=6),
text = element_text(color = "#22211d"),
plot.title = element_text(size= 13, hjust=0.1, color = "#4e4d47", margin = margin(b = -0.1, t = 0.4, l = 2, unit = "cm")),
) +
labs(caption="Source: Google Trends (https://www.google.com/trends)")
# packages _____________________________
packages <- c("gtrendsR"
,"lubridate"
,"config"
,"rstudioapi"
,"tidyverse"
,"viridis"
,"hrbrthemes"
,"mapdata"
,"hexbin"
,"spData")
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# usage ________________________________
ipak(packages)
# sets working directory to RScript location
if (Sys.getenv("RSTUDIO") == "1") {
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
} else {
wd <- '/home/R_Twitter-Bot/GTrends'
}
setwd(wd)
today <- Sys.Date()
today.5y <- today %m+% years(-5)
# gtrends variables ____________________
# define the keywords __________________
keywords=c("Bitcoin")
# set the geographic area: DE = Germany
country=c("")
# set the time window __________________
time=(paste(today.5y, today, sep = " "))
# set channels _________________________
channel=c("web", "news", "images", "froogle", "youtube")
# get google trends data _______________
gtrends.data <- gtrends(keyword = keywords, geo = country, time = time,
gprop = channel,
category = 0, hl = "en-US", low_search_volume = FALSE,
cookie_url = "http://trends.google.com/Cookies/NID", tz = 0,
onlyInterest = FALSE)
# select only interst over time ________
gtrends.data.country <- gtrends.data$interest_by_country
# Load dataset from github
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/17_ListGPSCoordinates.csv", sep=",", header=T)
# Get the world polygon
world <- map_data("world")
# plot
ggplot(data, aes(x=homelon, y=homelat)) +
geom_polygon(data = world, aes(x=long, y = lat, group = group), fill="grey", alpha=0.5) +
geom_hex(bins=100) +
#ggplot2::annotate("text", x = 175, y = 80, label="Worldwide Bitcoin Interest (Google Trends)", colour = "black", size=4, alpha=1, hjust=1) +
#ggplot2::annotate("segment", x = 100, xend = 175, y = 73, yend = 73, colour = "black", size=0.2, alpha=1) +
theme_void() +
ylim(-70, 80) +
scale_fill_viridis(
trans = "log",
breaks = seq(from = 0, to = 100, by = 10),
name=" ",
guide = guide_legend( keyheight = unit(2.5, units = "mm"), keywidth=unit(10, units = "mm"), label.position = "bottom", title.position = 'top', nrow=1)
)  +
ggtitle( "" ) +
theme(
legend.position = c(0.3, 0.01),
legend.title=element_text(color="black", size=6),
text = element_text(color = "#22211d"),
plot.title = element_text(size= 13, hjust=0.1, color = "#4e4d47", margin = margin(b = -0.1, t = 0.4, l = 2, unit = "cm")),
) +
labs(caption="Source: Google Trends (https://www.google.com/trends)")
gtrends.data.country
spData::world
countries <- spData::world %>%
left_join(y=ioc,by = c("name_long" = "location"),keep=T)
countries <- spData::world %>%
left_join(y=gtrends.data.country,by = c("name_long" = "location"),keep=T)
countries
spData::world
spData::world()
countries <- spData::world %>%
left_join(y=gtrends.data.country,by = c("name_long" = "location"),keep=T)
tm_shape(countries) +
tm_fill("hits",
title = "Search Interest",
legend.reverse = T,
id = "name_long",
popup.vars=c(Name = "name_long",Search.Interest = "hits",Population = "pop",Life.Expectancy = "lifeExp", GDP.per.capita = "gdpPercap"))
# packages _____________________________
packages <- c("gtrendsR"
,"lubridate"
,"config"
,"rstudioapi"
,"tidyverse"
,"viridis"
,"hrbrthemes"
,"mapdata"
,"hexbin"
,"spData"
,"tmap")
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# usage ________________________________
ipak(packages)
tm_shape(countries) +
tm_fill("hits",
title = "Search Interest",
legend.reverse = T,
id = "name_long",
popup.vars=c(Name = "name_long",Search.Interest = "hits",Population = "pop",Life.Expectancy = "lifeExp", GDP.per.capita = "gdpPercap"))
#
countries <- spData::world %>%
left_join(y=gtrends.data.country,by = c("name_long" = "location"),keep=T)
tm_shape(countries) +
tm_fill("hits",
title = "Search Interest",
legend.reverse = T,
id = "name_long",
popup.vars=c(Name = "name_long",Search.Interest = "hits",Population = "pop",Life.Expectancy = "lifeExp", GDP.per.capita = "gdpPercap"))
countries
tmap_mode("view")
tm_shape(countries) +
tm_fill("hits",
title = "Search Interest",
legend.reverse = T,
id = "name_long",
popup.vars=c(Name = "name_long",Search.Interest = "hits",Population = "pop",Life.Expectancy = "lifeExp", GDP.per.capita = "gdpPercap"))
tmap_mode("plot")
tm_shape(countries) +
tm_fill("hits",
title = "Search Interest",
legend.reverse = T,
id = "name_long",
popup.vars=c(Name = "name_long",Search.Interest = "hits",Population = "pop",Life.Expectancy = "lifeExp", GDP.per.capita = "gdpPercap"))
brew_Spectral
title = "Search Interest",
legend.reverse = T,
id = "name_long",
popup.vars=c(Name = "name_long",Search.Interest = "hits",Population = "pop",Life.Expectancy = "lifeExp", GDP.per.capita = "gdpPercap"))+
tm_polygons(col = "MAP_COLORS",
palette = "Pastel1")
tm_shape(countries) +
tm_fill("hits",
title = "Search Interest",
legend.reverse = T,
id = "name_long",
popup.vars=c(Name = "name_long",Search.Interest = "hits",Population = "pop",Life.Expectancy = "lifeExp", GDP.per.capita = "gdpPercap"))+
tm_polygons(col = "MAP_COLORS",
palette = "Pastel1")
tm_shape(countries) +
tm_fill("hits",
col = "MAP_COLORS",
palette = "Pastel1",
title = "Search Interest",
legend.reverse = T,
id = "name_long",
popup.vars=c(Name = "name_long",Search.Interest = "hits",Population = "pop",Life.Expectancy = "lifeExp", GDP.per.capita = "gdpPercap"))+
tm_polygons()
tm_shape(countries) +
tm_fill("hits",
col = "MAP_COLORS",
palette = "Pastel1",
title = "Search Interest",
legend.reverse = T,
id = "name_long",
popup.vars=c(Name = "name_long",Search.Interest = "hits",Population = "pop",Life.Expectancy = "lifeExp", GDP.per.capita = "gdpPercap"))
tm_shape(countries) +
tm_fill("hits",
title = "Search Interest",
legend.reverse = T,
id = "name_long",
popup.vars=c(Name = "name_long",Search.Interest = "hits",Population = "pop",Life.Expectancy = "lifeExp", GDP.per.capita = "gdpPercap"))
tm_shape(countries) +
tm_fill("hits",
title = "Search Interest",
legend.reverse = T,
id = "name_long",
popup.vars=c(Name = "name_long",Search.Interest = "hits",Population = "pop",Life.Expectancy = "lifeExp", GDP.per.capita = "gdpPercap")) +
tm_polygons()
# package tmap
tm_shape(countries) +
tm_fill("hits",
title = "Search Interest",
legend.reverse = T,
id = "name_long",
popup.vars=c(Name = "name_long",Search.Interest = "hits",Population = "pop",Life.Expectancy = "lifeExp", GDP.per.capita = "gdpPercap")) +
tm_polygons()
# save plot ____________________________
ggsave("gtrends_bitcoin_world_map.png", plot = last_plot())
# package tmap
map <- tm_shape(countries) +
tm_fill("hits",
title = "Search Interest",
legend.reverse = T,
id = "name_long",
popup.vars=c(Name = "name_long",Search.Interest = "hits",Population = "pop",Life.Expectancy = "lifeExp", GDP.per.capita = "gdpPercap")) +
tm_polygons()
# save plot ____________________________
tmap_save(map, "gtrends_bitcoin_world_map.png")
# package tmap
map <- tm_shape(countries) +
tm_fill("hits",
title = "Search Interest",
legend.reverse = T,
id = "name_long",
popup.vars=c(Name = "name_long",Search.Interest = "hits",Population = "pop",Life.Expectancy = "lifeExp", GDP.per.capita = "gdpPercap")) +
tm_polygons() +
tm_credits(text = "Source: Google Trends (https://www.google.com/trends)")
map
